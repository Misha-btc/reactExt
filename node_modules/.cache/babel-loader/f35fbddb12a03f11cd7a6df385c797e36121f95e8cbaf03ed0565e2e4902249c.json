{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./styles.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ThreadsList=()=>{const[threads,setThreads]=useState([]);const[showForm,setShowForm]=useState(false);const[isLoading,setIsLoading]=useState(false);const[threadName,setThreadName]=useState('');useEffect(()=>{loadThreads();},[]);const loadThreads=()=>{chrome.storage.sync.get(['openai_threads'],result=>{setThreads(result.openai_threads||[]);});};const setActiveThread=async threadId=>{const updatedThreads=threads.map(thread=>({...thread,active:thread.id===threadId}));await chrome.storage.sync.set({'openai_threads':updatedThreads});setThreads(updatedThreads);};const createThread=async e=>{e.preventDefault();setIsLoading(true);try{const result=await chrome.storage.sync.get(['openai_api_key']);if(!result.openai_api_key){throw new Error('Please set your OpenAI API key first');}const response=await fetch('https://api.openai.com/v1/threads',{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${result.openai_api_key}`,'OpenAI-Beta':'assistants=v2'},body:JSON.stringify({metadata:{name:threadName}})});if(!response.ok){const errorData=await response.text();throw new Error(`HTTP error! status: ${response.status}, ${errorData}`);}const newThread=await response.json();const updatedThreads=[...threads,{...newThread,metadata:{name:threadName},active:false}];await chrome.storage.sync.set({'openai_threads':updatedThreads});setThreads(updatedThreads);setShowForm(false);setThreadName('');}catch(error){const errorMessage=error instanceof Error?error.message:'An unknown error occurred';alert(`Error creating thread: ${errorMessage}`);}finally{setIsLoading(false);}};const formatDate=timestamp=>{return new Date(timestamp*1000).toLocaleString();};return/*#__PURE__*/_jsxs(\"div\",{className:\"threads-list\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"My Topics\"}),!showForm?/*#__PURE__*/_jsxs(_Fragment,{children:[threads.length>0?threads.map(thread=>/*#__PURE__*/_jsxs(\"div\",{className:`thread-card ${thread.active?'active':''}`,onClick:()=>setActiveThread(thread.id),children:[/*#__PURE__*/_jsx(\"div\",{className:\"thread-name\",children:thread.metadata.name||'Unnamed Topic'}),/*#__PURE__*/_jsxs(\"div\",{className:\"thread-date\",children:[\"Created: \",formatDate(thread.created_at)]})]},thread.id)):/*#__PURE__*/_jsx(\"p\",{children:\"No topics available\"}),/*#__PURE__*/_jsx(\"button\",{className:\"button add-thread-btn\",onClick:()=>setShowForm(true),children:\"Create New Topic\"})]}):/*#__PURE__*/_jsxs(\"form\",{onSubmit:createThread,className:\"thread-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"threadName\",children:\"Topic Name\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"threadName\",value:threadName,onChange:e=>setThreadName(e.target.value),placeholder:\"Enter topic name\",required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-actions\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"button secondary\",onClick:()=>setShowForm(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"button\",disabled:isLoading,children:isLoading?'Creating...':'Create Topic'})]})]})]});};export default ThreadsList;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ThreadsList","threads","setThreads","showForm","setShowForm","isLoading","setIsLoading","threadName","setThreadName","loadThreads","chrome","storage","sync","get","result","openai_threads","setActiveThread","threadId","updatedThreads","map","thread","active","id","set","createThread","e","preventDefault","openai_api_key","Error","response","fetch","method","headers","body","JSON","stringify","metadata","name","ok","errorData","text","status","newThread","json","error","errorMessage","message","alert","formatDate","timestamp","Date","toLocaleString","className","children","length","onClick","created_at","onSubmit","htmlFor","type","value","onChange","target","placeholder","required","disabled"],"sources":["/Users/misha/code/reactExt/src/components/ThreadsList.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './styles.css';\n\ninterface Thread {\n  id: string;\n  created_at: number;\n  metadata: {\n    name?: string;\n  };\n  active?: boolean;\n}\n\nconst ThreadsList: React.FC = () => {\n  const [threads, setThreads] = useState<Thread[]>([]);\n  const [showForm, setShowForm] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [threadName, setThreadName] = useState('');\n\n  useEffect(() => {\n    loadThreads();\n  }, []);\n\n  const loadThreads = () => {\n    chrome.storage.sync.get(['openai_threads'], (result) => {\n      setThreads(result.openai_threads || []);\n    });\n  };\n\n  const setActiveThread = async (threadId: string) => {\n    const updatedThreads = threads.map(thread => ({\n      ...thread,\n      active: thread.id === threadId\n    }));\n    \n    await chrome.storage.sync.set({ 'openai_threads': updatedThreads });\n    setThreads(updatedThreads);\n  };\n\n  const createThread = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const result = await chrome.storage.sync.get(['openai_api_key']);\n      \n      if (!result.openai_api_key) {\n        throw new Error('Please set your OpenAI API key first');\n      }\n\n      const response = await fetch('https://api.openai.com/v1/threads', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${result.openai_api_key}`,\n          'OpenAI-Beta': 'assistants=v2'\n        },\n        body: JSON.stringify({\n          metadata: {\n            name: threadName\n          }\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, ${errorData}`);\n      }\n\n      const newThread = await response.json();\n      \n      const updatedThreads = [...threads, {\n        ...newThread,\n        metadata: { name: threadName },\n        active: false\n      }];\n\n      await chrome.storage.sync.set({ 'openai_threads': updatedThreads });\n      setThreads(updatedThreads);\n      setShowForm(false);\n      setThreadName('');\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n      alert(`Error creating thread: ${errorMessage}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatDate = (timestamp: number) => {\n    return new Date(timestamp * 1000).toLocaleString();\n  };\n\n  return (\n    <div className=\"threads-list\">\n      <h2>My Topics</h2>\n      \n      {!showForm ? (\n        <>\n          {threads.length > 0 ? (\n            threads.map(thread => (\n              <div \n                key={thread.id}\n                className={`thread-card ${thread.active ? 'active' : ''}`}\n                onClick={() => setActiveThread(thread.id)}\n              >\n                <div className=\"thread-name\">\n                  {thread.metadata.name || 'Unnamed Topic'}\n                </div>\n                <div className=\"thread-date\">\n                  Created: {formatDate(thread.created_at)}\n                </div>\n              </div>\n            ))\n          ) : (\n            <p>No topics available</p>\n          )}\n          <button \n            className=\"button add-thread-btn\" \n            onClick={() => setShowForm(true)}\n          >\n            Create New Topic\n          </button>\n        </>\n      ) : (\n        <form onSubmit={createThread} className=\"thread-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"threadName\">Topic Name</label>\n            <input\n              type=\"text\"\n              id=\"threadName\"\n              value={threadName}\n              onChange={(e) => setThreadName(e.target.value)}\n              placeholder=\"Enter topic name\"\n              required\n            />\n          </div>\n\n          <div className=\"form-actions\">\n            <button \n              type=\"button\" \n              className=\"button secondary\" \n              onClick={() => setShowForm(false)}\n            >\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"button\" \n              disabled={isLoading}\n            >\n              {isLoading ? 'Creating...' : 'Create Topic'}\n            </button>\n          </div>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default ThreadsList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}